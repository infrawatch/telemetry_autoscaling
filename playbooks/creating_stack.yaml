#!/usr/bin/env ansible-playbook
---
# Creating the stack deployment for autoscaling
# ansible-playbook -v -i `ir workspace inventory` creating_stack.yaml

- hosts: undercloud
  become: no
  name: RHELOSP-178985 Creating the stack deployment for autoscaling
  tasks:

    - name: Create the stack
      shell: |
        source ~/overcloudrc;
        openstack stack create \
        -t $HOME/templates/autoscaling/vnf/template.yaml \
        -e $HOME/templates/autoscaling/vnf/resources.yaml \
        vnf;
      register: result
      failed_when: result.rc >= 1

    - name: Wait for 60 sec
      pause:
        minutes: 1

    - name: Verify that the stack was created successfully
      shell: |
        source ~/overcloudrc;
        openstack stack show vnf -c id -c stack_status;
      register: result
      failed_when: '"CREATE_COMPLETE" not in result.stdout'

      # Debug Task can be removed later
    - name: Verify that the stack events
      shell: |
        source ~/overcloudrc
        openstack stack event list vnf
      register: event_result
      failed_when: false  # Allow task to continue even if this failed

    - name: Verify that the stack resources are created
      shell: |
        source ~/overcloudrc;
        export STACK_ID=$(openstack stack show vnf -c id -f value);
        openstack stack resource list $STACK_ID;
      register: result
      failed_when: '"CREATE_COMPLETE" not in result.stdout'

    - name: Verify that an instance was launched by the stack creation
      shell: |
        source ~/overcloudrc;
        export STACK_ID=$(openstack stack show vnf -c id -f value);
        openstack server list --long | grep $STACK_ID;
      register: result
      failed_when: result.rc >= 1

    - name: Verify that the alarms were created for the stack
      shell: |
        source ~/overcloudrc;
        openstack alarm list
      register: result
      failed_when: result.rc >= 1

    - name: Note the physical_resource_id values for the cpu_alarm_low resource
      shell: |
        source ~/overcloudrc;
        export STACK_ID=$(openstack stack show vnf -c id -f value);
        openstack stack resource list $STACK_ID |grep -i cpu_alarm_low | awk '{print $4}'
      register: physical_resource_id_low

    - name: Note the physical_resource_id values for the cpu_alarm_high resource
      shell: |
        source ~/overcloudrc;
        export STACK_ID=$(openstack stack show vnf -c id -f value);
        openstack stack resource list $STACK_ID |grep -i cpu_alarm_high | awk '{print $4}'
      register: physical_resource_id_high

    - name: Verify physical_resource_id match the alarm id for cpu_alarm_low
      shell: |
        source ~/overcloudrc;
        openstack alarm list |grep -i cpu_alarm_low | awk '{print $2}'
      register: alarm_id_low
      failed_when: 
        - physical_resource_id_low.stdout != alarm_id_low.stdout

    - name: Verify physical_resource_id match the alarm id for cpu_alarm_high
      shell: |
        source ~/overcloudrc;
        openstack alarm list |grep -i cpu_alarm_high | awk '{print $2}'
      register: alarm_id_high
      failed_when: 
        - physical_resource_id_high.stdout != alarm_id_high.stdout

    - name: Verify that metric resources exist for the stack
      shell: |
        source ~/overcloudrc;
        export STACK_ID=$(openstack stack show vnf -c id -f value);
        openstack metric resource search \
        --sort-column launched_at -c id \
        -c display_name -c launched_at \
        -c deleted_at --type instance \
        server_group="$STACK_ID"
      register: result
      failed_when: result.rc >= 1

...
