#!/usr/bin/env ansible-playbook
---
# Testing automatic scaling of instances
# ansible-playbook -v -i `ir workspace inventory` test_autoscaling.yaml

- hosts: undercloud
  become: no
  name: Test automatic scaling of instances
  vars:
    openstack_cmd: "{{ openstack_cmd if openstack_cmd is defined else 'openstack' }}"
    stack_name: "{{ stack_name if stack_name is defined else 'vnf' }}"
  tasks:

    - name: register instance IP
      shell: |
        source ~/overcloudrc;
        export STACK_ID=$({{ openstack_cmd }} stack show {{ stack_name }} -c id -f value)
        {{ openstack_cmd }} server list --long -c Networks -c 'Properties' | \
            grep -i $STACK_ID | \
            awk  -F'=' '{print $2}' | \
            awk -F',' '{print $1}'
      register: vnf_instance_ip

    - name: Verfiy the number of instances before scaling
      shell: |
        source ~/overcloudrc;
        {{ openstack_cmd }} server list --long|grep -i metering.server_group |wc -l
      register: instance_count1

    - name: Test automatic scaling up of instances
      shell: |
        sshpass -p gocubsgo ssh cirros@{{ vnf_instance_ip.stdout }} "sudo yes > /dev/null &"
      register: result

    - name: Verify that the alarm has been triggered
      shell: |
        source ~/overcloudrc;
        {{ openstack_cmd }} alarm list -c state -c name -f value| \
            grep -i "cpu_alarm_high" | \
            awk '{print $2}'
      retries: 100
      delay: 5
      register: result
      until: result.stdout == "alarm"

    - name: Verify that the Orchestration service has scaled up the instances 
      shell: |
        source ~/overcloudrc;
        {{ openstack_cmd }} server list --long|grep -i metering.server_group | wc -l
      retries: 100
      delay: 5
      register: instance_count2
      until: instance_count2.stdout == "3"
    
    - name: Test automatic scaling down of instances
      pause:
        minutes: 5

    - name: Verify that the alarm has been triggered
      shell: |
        source ~/overcloudrc;
        {{ openstack_cmd }} alarm list -c state -c name -f value| \
            grep -i "cpu_alarm_low" | \
            awk '{print $2}'
      retries: 100
      delay: 5
      register: result
      until: result.stdout == "alarm"

    - name: Verify that the Orchestration service has scaled down the instances
      shell: |
        source ~/overcloudrc;
        {{ openstack_cmd }} server list --long|grep -i metering.server_group |wc -l
      retries: 100
      delay: 5
      register: instance_count3
      until: instance_count3.stdout == "1"

...
