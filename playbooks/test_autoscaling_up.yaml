#!/usr/bin/env ansible-playbook
---
# Testing automatic scaling up of instances
# ansible-playbook -v -i `ir workspace inventory` test_autoscaling_up.yaml

- hosts: undercloud
  become: no
  name: Test automatic scaling up of instances
  tasks:

    - name: register instance ID
      shell: |
        source ~/overcloudrc;
        export STACK_ID=$(openstack stack show vnf -c id -f value)
        openstack server list --long -c ID -c 'Properties' |grep -i "metering.server_group='$STACK_ID'" | awk '{print $2}'
      register: vnf_instance_id

    - name: register instance IP
      shell: |
        source ~/overcloudrc;
        export STACK_ID=$(openstack stack show vnf -c id -f value)
        openstack server list --long -c Networks -c 'Properties' | \
            grep -i $STACK_ID | \
            awk  -F'=' '{print $2}' | \
            awk -F',' '{print $1}'
      register: vnf_instance_ip

    - name: Verfiy the number of instances before scaling
      shell: |
        source ~/overcloudrc;
        openstack server list -c ID -f value | wc -l
      register: instance_count1

    - name: Test automatic scaling up of instances
      shell: |
        ssh -i ~/mykey.pem cirros@{{ vnf_instance_ip.stdout }}
        yes > /dev/null &
      register: result

    - name: Verify that the alarm has been triggered
      shell: |
        source ~/overcloudrc;
        openstack alarm list -c state -c name -f value | \
            grep -i "cpu_alarm_high" | \
            awk '{print $2}'
      register: result
      failed_when: '"alarm" not in result.stdout'

    - name: Wait for 60 sec
      pause:
        minutes: 1

    - name: Verify that the Orchestration service has autoscaled 
      shell: |
        source ~/overcloudrc;
        openstack server list -c ID -f value | wc -l
      register: instance_count2
    
    - name: Wait for 300 sec
      pause:
        minutes: 5

    - name: Verify that the Orchestration service has autoscaled to maximum configuration
      shell: |
        source ~/overcloudrc;
        openstack server list;
      register: instance_count3
      failed_when:
        - instance_count3 <= instance_count1
        - instance_count3 != 5 

...
